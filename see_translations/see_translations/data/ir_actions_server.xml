<?xml version="1.0" encoding="utf-8"?>
<openerp>
    <data>
        <record model="ir.actions.server" id="view_translations_action">
            <field name="name">Find translations of the current view</field>
            <field name="model_id" eval="ref('base.model_ir_ui_view')"/>
            <field name="state">code</field>
            <field name="condition">True</field>
            <field name="sequence">5</field>
            <field name="code">
domain = [('type', '=', 'view')]
context.update({
    'default_module': '__custo__',
    'default_type': 'view',
})

if object.type == "qweb":
    parent = object.inherit_id
    current = object
    while parent and current.mode != 'primary':
        current = parent
        parent = parent.inherit_id
    domain += [('res_id', '=', current.id)]
    context.update({
        'default_name': 'website',
        'default_res_id': current.id,
    })
else:
    domain += [('name', '=', object.model)]
    context.update({
        'search_default_group_by_src': 1,
        'default_name': object.model,
    })

action_dict = env['ir.actions.act_window'].for_xml_id('base', 'action_translation')
action_dict.update({
    'domain': domain,
    'context': context,
})
action = action_dict
            </field>
        </record>

<record model="ir.actions.server" id="field_translations_action">
            <field name="name">Find translations of the current field</field>
            <field name="model_id" eval="ref('base.model_ir_model_fields')"/>
            <field name="state">code</field>
            <field name="condition">True</field>
            <field name="sequence">5</field>
            <field name="code">
name = "%s,%s" % (object.model_id.model, object.name)
domain = [('name', '=', name), ('type', '=', 'field')]
source = model.with_context(dict(context, lang=None)).browse(object.id).field_description

context.update({
    'default_module': '__custo__',
    'default_type': 'field',
    'default_name': name,
    'default_source': source
    })

action_dict = env['ir.actions.act_window'].for_xml_id('base', 'action_translation')
action_dict.update({
    'domain': domain,
    'context': context,
})
action = action_dict
            </field>
        </record>

<record model="ir.actions.server" id="selection_translations_action">
            <field name="name">Find and create translations for the labels of this selection field</field>
            <field name="model_id" eval="ref('base.model_ir_model_fields')"/>
            <field name="state">code</field>
            <field name="condition">True</field>
            <field name="sequence">5</field>
            <field name="code">
Translation = env['ir.translation']
field_name = object.name
model_name = object.model_id.model

labels_en = [tup[1] for tup in env[model_name].with_context(lang='en_US').fields_get([field_name])[field_name]['selection']]

name = "%s,%s" % (model_name, field_name)
domain = [('name', '=', name), ('type', '=', 'selection')]

for lang_code in env['res.lang'].search([('code', '!=', 'en_US')]).mapped('code'):
    for label in labels_en:
        if not Translation.search_count(domain + [('lang', '=', lang_code), ('src', '=', label)]):
            Translation.create({
                'module': '__custo__',
                'type': 'selection',
                'name': name,
                'lang': lang_code,
                'source': label
                })

action_dict = env['ir.actions.act_window'].for_xml_id('base', 'action_translation')
action_dict.update({
    'domain': domain
})
action = action_dict
            </field>
        </record>


    </data>
</openerp>